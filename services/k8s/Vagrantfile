# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'

Vagrant.require_version ">= 1.6.0"

# Make sure the vagrant-ignition plugin is installed
required_plugins = %w(vagrant-ignition)

plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "Installing plugins: #{plugins_to_install.join(' ')}"
  if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    exec "vagrant #{ARGV.join(' ')}"
  else
    abort "Installation of one or more plugins has failed. Aborting."
  end
end

Vagrant.configure("2") do |config|
    config.vm.provider "virtualbox"
    
    config.ssh.insert_key = false
    config.ssh.forward_agent = true
  
    config.vm.box = "coreos-alpha"
    config.vm.box_version = ">= 766.0.0"
    config.vm.box_url = "https://alpha.release.core-os.net/amd64-usr/current/coreos_production_vagrant_virtualbox.json"

    config.vm.provider :virtualbox do |v|
        # On VirtualBox, we don't have guest additions or a functional vboxsf
        # in CoreOS, so tell Vagrant that so it can be smarter.
        v.check_guest_additions = false
        v.functional_vboxsf     = false
        # enable ignition (this is always done on virtualbox as this is how the ssh key is added to the system)
        config.ignition.enabled = true
      end
    
    # plugin conflict
    if Vagrant.has_plugin?("vagrant-vbguest") then
        config.vbguest.auto_update = false
    end

    config.ignition.drive_root = "config_drives"

    $etcd_count = 1
    (1..$etcd_count).each do |i|
        config.vm.define "etcd%d" % i do |etcd|
            vm_name = "etcd%d" % i
            ip_address = "10.100.50.%d" % (100 + i - 1)
            etcd.vm.hostname = vm_name
            etcd.vm.network :private_network, ip: ip_address, netmask: "255.255.0.0"

            etcd.vm.provider :virtualbox do |vb|
                etcd.ignition.config_obj = vb
                vb.memory = 1024
            end
            etcd.ignition.hostname = vm_name
            etcd.ignition.ip = ip_address
            etcd.ignition.path = "etcd.ign"
            etcd.ignition.drive_name = vm_name

            etcd.vm.provision :shell, :inline => "echo \"ETCD_NAME=#{vm_name}\" > /run/etcd_environment", :privileged => true
            etcd.vm.provision :shell, :inline => "echo \"ETCD_ADVERTISE_CLIENT_URLS=https://#{ip_address}:2379\" >> /run/etcd_environment", :privileged => true
            etcd.vm.provision :shell, :inline => "echo \"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://#{ip_address}:2380\" >> /run/etcd_environment", :privileged => true
            etcd.vm.provision :shell, :inline => "echo \"ETCD_LISTEN_PEER_URLS=https://#{ip_address}:2380\" >> /run/etcd_environment", :privileged => true
            etcd.vm.provision :shell, :inline => "touch /run/etcd_environment.done", :privileged => true
        end
    end

    config.vm.define "haproxy" do |haproxy|
        vm_name = "haproxy"
        ip_address = "10.100.100.100"
        haproxy.vm.hostname = vm_name
        haproxy.vm.network :private_network, ip: ip_address, netmask: "255.255.0.0"

        haproxy.vm.provider :virtualbox do |vb|
            vb.memory = 1024
            haproxy.ignition.config_obj = vb
        end
        haproxy.ignition.hostname = vm_name
        haproxy.ignition.ip = ip_address
        haproxy.ignition.path = "haproxy.ign"
        haproxy.ignition.drive_name = vm_name
    end

    config.vm.define "bootstrap" do |bootstrap|
        vm_name = "bootstrap"
        ip_address = "10.100.100.101"
        bootstrap.vm.hostname = vm_name
        bootstrap.vm.network :private_network, ip: ip_address, netmask: "255.255.0.0"

        bootstrap.vm.provider :virtualbox do |vb|
            vb.memory = 2048
            bootstrap.ignition.config_obj = vb
        end
        bootstrap.ignition.hostname = vm_name
        bootstrap.ignition.ip = ip_address
        bootstrap.ignition.path = "bootstrap.ign"
        bootstrap.ignition.drive_name = vm_name

        bootstrap.vm.provision :shell, :inline => "echo \"COREOS_PUBLIC_IPV4=#{ip_address}\" > /etc/environment", :privileged => true
        bootstrap.vm.provision :shell, :inline => "touch /run/etcd_environment.done", :privileged => true
    end

    $controller_count = 2
    (1..$controller_count).each do |i|
        config.vm.define "controller%d" % i do |controller|
            vm_name = "controller%d" %i
            ip_address = "10.100.100.%d" % (102 + i -1)
            controller.vm.hostname = vm_name
            controller.vm.network :private_network, ip: ip_address, netmask: "255.255.0.0"

            controller.vm.provider :virtualbox do |vb|
                vb.memory = 2048
                controller.ignition.config_obj = vb
            end
            controller.ignition.hostname = vm_name
            controller.ignition.ip = ip_address
            controller.ignition.path = "controller.ign"
            controller.ignition.drive_name = vm_name

            controller.vm.provision :shell, :inline => "echo \"COREOS_PUBLIC_IPV4=#{ip_address}\" > /etc/environment", :privileged => true
            controller.vm.provision :shell, :inline => "touch /run/etcd_environment.done", :privileged => true
        end
    end

    $worker_count = 2
    (1..$worker_count).each do |i|
        config.vm.define "worker%d" % i do |worker|
            vm_name = "worker%d" %i
            ip_address = "10.100.150.%d" % (100 + i -1)
            worker.vm.hostname = vm_name
            worker.vm.network :private_network, ip: ip_address, netmask: "255.255.0.0"

            worker.vm.provider :virtualbox do |vb|
                vb.memory = 1024
                worker.ignition.config_obj = vb
            end
            worker.ignition.hostname = vm_name
            worker.ignition.ip = ip_address
            worker.ignition.path = "worker.ign"
            worker.ignition.drive_name = vm_name

            worker.vm.provision :shell, :inline => "echo \"COREOS_PUBLIC_IPV4=#{ip_address}\" > /etc/environment", :privileged => true
            worker.vm.provision :shell, :inline => "touch /run/etcd_environment.done", :privileged => true
        end
    end
end
